generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// üåç Module: auth
model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  name      String?
  verified  Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  reviews   Review[]
  profile   Profile?
  sessions  Session[]
  tokens    Token[]
  roles     UserRole[]
  products  Product[]
  bookings  Booking[]
  Media     Media[]

  @@map("users")
}

model Profile {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
  bio       String?
  avatarUrl String?
  phone     String?
  address   String?
  dob       DateTime?
  gender    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("profiles")
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  device    String?
  ipAddress String?
  userAgent String?
  latitude  Float?
  longitude Float?
  active    Boolean  @default(true)
  lastUsed  DateTime @default(now())
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("sessions")
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  token     String
  otp       String?
  type      String
  createdAt DateTime @default(now())
  expiresAt DateTime
  used      Boolean  @default(false)

  @@map("tokens")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  permissions Permission[]
  users       UserRole[]

  RolePermission RolePermission[]

  @@map("roles")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  roles       RolePermission[]

  Role Role[]

  @@map("permissions")
}

model UserRole {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@map("user_roles")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@map("role_permissions")
}

// Media Database initialization code here
// Media Database initialization code here
// Media Database initialization code here

// üåç Module: media
// Media Database initialization code here
model Media {
  id         Int      @id @default(autoincrement())
  productId  Int?
  userId     Int?
  fileName   String?
  filePath   String?
  fileType   String?
  fileSize   Int?
  altText    String?
  isFeatured Boolean  @default(false)
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  product Product? @relation(fields: [productId], references: [id])
  user    User?    @relation(fields: [userId], references: [id])

  @@map("medias")
}

// üåç Module: product
model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String?   @unique
  description String?
  icon        String?
  isActive    Boolean   @default(true)
  priority    Int       @default(0)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  metadata    Json?

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String?
  description String?
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  isActive    Boolean  @default(true)
  isArchived  Boolean  @default(false)
  isComplete  Int      @default(0)
  currentStep Int      @default(1)
  status      String   @default("good")
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  location  Location?
  pricing   Pricing?
  roomTypes RoomType[]
  amenities Amenity[]
  reviews   Review[]
  bookings  Booking[]
  User      User?      @relation(fields: [userId], references: [id])
  userId    Int
  medias    Media[]

  @@index([categoryId])
  @@map("products")
}

model Location {
  id           Int     @id @default(autoincrement())
  product      Product @relation(fields: [productId], references: [id])
  productId    Int     @unique
  street       String
  city         String
  state        String?
  country      String
  postalCode   String?
  latitude     Float?
  longitude    Float?
  timezone     String?
  neighborhood String?
  landmarks    String?
  description  String?
  airportCode  String?
  metroAccess  Boolean @default(false)

  @@index([city, country])
  @@index([latitude, longitude])
  @@map("locations")
}

model Pricing {
  id                 Int     @id @default(autoincrement())
  product            Product @relation(fields: [productId], references: [id])
  productId          Int     @unique
  basePrice          Float   @default(0.0)
  currency           String  @default("USD")
  taxRate            Float   @default(0.0)
  cleaningFee        Float?  @default(0.0)
  resortFee          Float?  @default(0.0)
  securityDeposit    Float?  @default(0.0)
  weeklyDiscount     Float?  @default(0.0)
  monthlyDiscount    Float?  @default(0.0)
  minStayDiscount    Json?
  seasonalRates      Json?
  acceptsCreditCards Boolean @default(true)
  paymentPolicy      String?

  @@map("pricings")
}

model Booking {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  checkIn    DateTime
  checkOut   DateTime
  guests     Int
  totalPrice Float
  status     String   @default("pending")
  payment    Json?
  createdAt  DateTime @default(now())

  @@index([productId])
  @@index([userId])
  @@index([checkIn, checkOut])
  @@map("bookings")
}

model Review {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@index([productId])
  @@index([userId])
  @@map("reviews")
}

model RoomType {
  id          Int       @id @default(autoincrement())
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  name        String
  description String?
  maxGuests   Int       @default(1)
  sizeSqFt    Int?
  quantity    Int       @default(1)
  basePrice   Float?
  amenities   Amenity[]

  @@index([productId])
  @@map("room_types")
}

model Amenity {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  icon        String?
  category    AmenityCategory
  isFeatured  Boolean         @default(false)
  description String?
  products    Product[]
  RoomType    RoomType?       @relation(fields: [roomTypeId], references: [id])
  roomTypeId  Int?

  @@map("amenities")
}

enum AmenityCategory {
  GENERAL
  ROOM
  BATHROOM
  KITCHEN
  ACCESSIBILITY
  SAFETY
  OUTDOOR
  SERVICES
}
